import json
import os,time
import cloudscraper
import socket
import subprocess
from time import strftime
from time import sleep
from datetime import datetime, timedelta
from bs4 import BeautifulSoup
import time
from colorama import Fore, init
import sys
import requests, os, base64, json
from datetime import datetime
from time import sleep
import requests, json, os
from datetime import datetime

RESET = "\033[0m"
BOLD = "\033[1m"
CYAN = "\033[96m"
MAGENTA = "\033[95m"
YELLOW = "\033[93m"
GREEN = "\033[92m"
BLUE = "\033[94m"
AQUA = "\033[96m"
LIME = "\033[92m"

def xoss(z):
    for e in z + '\n':
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.005)
os.system('cls' if os.name == 'nt' else 'clear')
xoss("\n\033[1;32mVui L√≤ng Ch·ªù... ")
sleep(1.5)
os.system('cls' if os.name == 'nt' else 'clear')
for i in range(1, 101):
  sys.stdout.write(f"\r{BOLD}{LIME}ƒêANG LOAD TOOL + GIT +: [{i}% {'‚ñà' * (i // 2)}]{RESET}")
  sys.stdout.flush()
  sleep(0.03)  # ƒêi·ªÅu ch·ªânh th·ªùi gian ch·ªù n·∫øu c·∫ßn
sleep(1)
import os
os.system("cls" if os.name == "nt" else "clear")
def xoss(z):
    for e in z + '\n':
        sys.stdout.write(e)
        sys.stdout.flush()
        time.sleep(0.005)
xoss('\n\033[1;32m[‚óè] \033[93mƒêang \033[96mLoad \033[95m \033[94mFile C·∫ßn Thi·∫øt... ');time.sleep(0.10)
xoss('\n\033[1;36m[‚óè] \033[94mƒêang \033[93mcheck \033[95mapi \033[96mtool...')
xoss('\n\033[1;33m[‚óè] \033[96mƒêang \033[95mki·ªÉm \033[94mtra \033[93mtool... ')
time.sleep(1.25)
xoss('\n\033[1;34m[‚óè] \033[91mCheck \033[96mth√†nh \033[94mc√¥ng \033[95m!!!')
xoss('\n\033[1;34m[‚óè] \033[92mƒêang \033[93mv√†o \033[95mtool \033[96m!!!')
os.system('cls' if os.name== 'nt' else 'clear')
def Update():
    exit('\033[1;31m[‚óè] ƒêang Ti·∫øn H√†nh V√†o Tool...... ')

sleep(1)
colors = [
    "\033[1;37m\033[1m",  # Tr·∫Øng
    "\033[1;32m\033[1m",  # Xanh l√°
    "\033[1;34m\033[1m",  # Xanh d∆∞∆°ng 
    "\033[1m\033[38;5;51m",  # Xanh nh·∫°t
    "\033[1;31m\033[1m\033[1m",  # ƒê·ªè
    "\033[1;30m\033{1m",  # X√°m
    "\033[1;33m\033[1m",  # V√†ng
    "\033[1;35m\033[1m",  # T√≠m
    "\033[32;5;245m\033[1m\033[38;5;39m",  # M√†u ƒë·∫∑c bi·ªát
]

def thanhngang(so):
    for i in range(so):
        print(range+'\033[1;31m-',end ='')
    print('')

def kiem_tra_mang():

    try:
        socket.create_connection(("8.8.8.8", 53), timeout=3)
    except OSError:
        print("M·∫°ng kh√¥ng ·ªïn ƒë·ªãnh ho·∫∑c b·ªã m·∫•t k·∫øt n·ªëi. Vui l√≤ng ki·ªÉm tra l·∫°i m·∫°ng.")

kiem_tra_mang()

banner = f"""
\033[1;37m\033[1m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ÄÅ ‚ñà‚ñà‚ÄÅ  ‚ñà‚ñà‚ÄÅ    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ÄÅ ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ÄÅ  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ÄÅ ‚ñà‚ñà                                            
\033[1;37m\033[1m‚ñà‚ñà‚ÄÅ‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ  ‚ñà‚ñà‚ÄÅ    ‚ÄÅ‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ                          
\033[1;32m\033[1m‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ÄÅ       ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ                
\033[1;34m\033[1m‚ñà‚ñà‚ÄÅ‚ÄÅ‚ÄÅ‚ÄÅ‚ÄÅ ‚ñà‚ñà‚ÄÅ‚ÄÅ‚ÄÅ‚ñà‚ñà‚ÄÅ       ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ   ‚ñà‚ñà‚ÄÅ‚ñà‚ñà‚ÄÅ                 
\033[1;30m\033[1m‚ñà‚ñà‚ÄÅ     ‚ñà‚ñà‚ÄÅ  ‚ñà‚ñà‚ÄÅ       ‚ñà‚ñà‚ÄÅ   ‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ÄÅ‚ÄÅ‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ÄÅ‚ÄÅ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ÄÅ
"""
for X in banner:
  sys.stdout.write(X)
  sys.stdout.flush() 
  sleep(0.000125)
  os.system('cls' if os.name== 'nt' else 'clear')
print(banner)
sleep(1.2)

    # Nh·∫≠p auth golike
try:
  Authorization = open("Authorization.txt","x")
  t = open("token.txt","x")
except:
  pass
Authorization = open("Authorization.txt","r")
t = open("token.txt","r")
author = Authorization.read()
token = t.read()
if author == "":
  author = input("\033[1;32m üí∏ NH·∫¨P AUTHORIZATION GOLIKE : \033[1;33m")
  token = input("\033[1;32müí∏  NH·∫¨P TOKEN (T C·ª¶A GOLIKE): \033[1;33m")
  Authorization = open("Authorization.txt","w")
  t = open("token.txt","w")
  Authorization.write(author)
  t.write(token)
else:
  print("\x1b[38;5;207m==================================================")
  print(f"\x1b[38;2;255;0;0mNh·∫≠p \033[1;39m[\033[1;35m1\033[1;39m]\x1b[38;2;255;0;0m ƒê·ªÉ v√†o Tool (N·∫øu ƒë√£ nh·∫≠p auth th√¨ ch·ªçn 1 nh√©)")
  print(f"\033[1;32mNh·∫≠p \033[1;39m[\033[1;35m2\033[1;39m] \033[1;32mƒë·ªÉ thay auth golike m·ªõi ")
  print("\x1b[38;5;207m==================================================")
  
  select = input(f"\033[1;32mNh·∫≠p s·ªë : ")
  kiem_tra_mang()
  if select != "1":
    author = select
  if select == "2":
    print("Ch·ªù 1 ch√∫t... ")
    for i in range(1, 101):
     sys.stdout.write(f"\r{BOLD}{LIME}ƒêANG TI·∫æN H√ÄNH X√ìA AUTH C≈® : [{i}% {'‚ñà' * (i // 2)}]{RESET}")
     sys.stdout.flush()
     sleep(0.03)  # ƒêi·ªÅu ch·ªânh th·ªùi gian ch·ªù n·∫øu c·∫ßn
    os.system('cls' if os.name== 'nt' else 'clear')
    print(banner)
    author = input("\033[1;33mNh·∫≠p Auth Golike M·ªõi : ")
    token = input("\033[1;32mNh·∫≠p T Golike M·ªõi : \033[1;33m")
    Authorization = open("Authorization.txt","w")
    t = open("token.txt","w")
    Authorization.write(author)
    t.write(token)
Authorization.close()
t.close()
os.system('cls' if os.name== 'nt' else 'clear')
print(banner)
print("\033[1;32mDanh S√°ch Acc Tik Tok Hi·ªán C√≥ üçâ")
print("\033[97m==================================")
headers = {
    'Accept': 'application/json, text/plain, */*',
    'Content-Type': 'application/json;charset=utf-8',
    'Authorization': author,
    't': token,
    'User-Agent': 'Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Mobile Safari/537.36',
    'Referer': 'https://app.golike.net/account/manager/tiktok',
}

scraper = cloudscraper.create_scraper()
def chonacc():
    json_data = {}
    try:
      response = scraper.get(
        'https://gateway.golike.net/api/tiktok-account',
    
        headers=headers,
        json=json_data
     ).json()
      return response
    except Exception:
      sys.exit()

def nhannv(account_id):
    try:
        params = {
            'account_id': account_id,
            'data': 'null',
        }
   
        response = scraper.get(
            'https://gateway.golike.net/api/advertising/publishers/tiktok/jobs',
            headers=headers,
            params=params,
            json={}
        )
        return response.json()
    except Exception:
      sys.exit()

def hoanthanh(ads_id, account_id):
    try:
        json_data = {
            'ads_id': ads_id,
            'account_id': account_id,
            'async': True,
            'data': None,
        }

        response = scraper.post(
            'https://gateway.golike.net/api/advertising/publishers/tiktok/complete-jobs',
            headers=headers,
            json=json_data,
            timeout=6
        )
        return response.json()
    except Exception:
      sys.exit()

def baoloi(ads_id, object_id, account_id, loai):
    try:
        json_data1 = {
            'description': 'T√¥i ƒë√£ l√†m Job n√†y r·ªìi',
            'users_advertising_id': ads_id,
            'type': 'ads',
            'provider': 'tiktok',
            'fb_id': account_id,
            'error_type': 6,
        }

        scraper.post('https://gateway.golike.net/api/report/send', headers=headers, json=json_data1)

        json_data2 = {
            'ads_id': ads_id,
            'object_id': object_id,
            'account_id': account_id,
            'type': loai,
        }

        scraper.post(
            'https://gateway.golike.net/api/advertising/publishers/tiktok/skip-jobs',
            headers=headers,
            json=json_data2,
        )
    except Exception:
      sys.exit()

# G·ªçi ch·ªçn t√†i kho·∫£n m·ªôt l·∫ßn v√† x·ª≠ l√Ω l·ªói n·∫øu c√≥
chontktiktok = chonacc()

def dsacc():
  if chontktiktok.get("status") != 200:  
    print("\033[1;31mAuthorization hoƒÉc T sai üòÇ")
    quit()
  for i in range(len(chontktiktok["data"])):
    print(f'\033[1;33m[{i+1}]\033[1;32m {chontktiktok["data"][i]["nickname"]} \033[1;20m|\033[1;32müçâ\033[1;20m Online')
dsacc() 
print("\033[97m==================================")
while True:
  try:
    luachon = int(input("\033[1;32mCh·ªçn t√†i kho·∫£n TIKTOK b·∫°n mu·ªën ch·∫°y ü§ë: \033[1;33m"))
    while luachon > len((chontktiktok)["data"]):
      luachon = int(input("\033[1;31mAcc N√†y Kh√¥ng C√≥ Trong Danh S√°ch C·∫•u H√¨nh , Nh·∫≠p L·∫°i : \033[1;33m"))
    account_id = chontktiktok["data"][luachon - 1]["id"]
    break  
  except:
    print("\033[1;31m Sai ƒê·ªãnh D·∫°ng ") 
while True:
  try:
    os.system('cls' if os.name== 'nt' else 'clear')
    delay = int(input(f"\033[1;32mDelay th·ª±c hi·ªán job üçâ : \033[1;33m"))
    break
  except:
    print("\033[1;31m Sai ƒê·ªãnh D·∫°ng ")
while True:
  try: 
    os.system('cls' if os.name== 'nt' else 'clear')
    doiacc = int(input(f"\033[1;32mTh·∫•t b·∫°i bao nhi√™u l·∫ßn th√¨ ƒë·ªïi acc tiktok üçâ: \033[1;33m"))
    break
  except:
    print("\033[1;31mNh·∫≠p V√†o 1 S·ªë ")  
    
os.system('cls' if os.name== 'nt' else 'clear')
print("\033[1;33m         CH·ªåN JOB ƒê·ªÇ L√ÄM KI·∫æM TI·ªÄN")
print("")
print("\033[1;36mNh·∫≠p \033[1;39m[\033[1;36m1\033[1;39m] Th·ª±c Hi·ªán NV \033[1;33mFollow ‚ûï ")
print("\033[1;36mNh·∫≠p \033[1;39m[\033[1;36m2\033[1;39m] Th·ª±c Hi·ªán NV \033[1;31mLike Video Job ‚ù§")
print("\033[1;36mNh·∫≠p \033[1;39m[\033[1;36m3\033[1;39m] Th·ª±c Hi·ªán C·∫£ 2 NV \033[1;33mFOLLOW + \033[1;31mLIKE ‚ûï‚ù§ ")

while True:
    try:
        loai_nhiem_vu = int(input("\033[1;32mCh·ªçn lo·∫°i nv c·∫ßn ki·∫øm ti·ªÅn üçâ : \033[1;33m "))
        if loai_nhiem_vu in [1, 2, 3]:
            break
        else:
            print("\033[1;31mVui l√≤ng ch·ªçn s·ªë t·ª´ 1 ƒë·∫øn 3!")
    except:
        print("\033[1;31mSai ƒë·ªãnh d·∫°ng! Vui l√≤ng nh·∫≠p s·ªë.")  

os.system('cls' if os.name== 'nt' else 'clear')
x_like, y_like, x_follow, y_follow = None, None, None, None

print("\033[1;36m            AUTOCLICK V√Ä ADB ")
print("")
print(f"\033[1;36mNh·∫≠p \033[1;39m[\033[1;36m1\033[1;39m] ƒê·ªÉ S·ª≠ D·ª•ng \033[1;32mADB ‚úîÔ∏è")
print(f"\033[1;36mNh·∫≠p \033[1;39m[\033[1;36m2\033[1;39m] ƒê·ªÉ D√πng \033[1;35mAutoClick No ADB ‚ùå ")

adbyn = input(f"\033[1;32mNh·∫≠p l·ª±a ch·ªçn üçâ :\033[1;33m ")

if adbyn == "1":
    def setup_adb():
      config_file = "adb_config.txt"
      like_coords_file = "toa_do_tim.txt"
      follow_coords_file = "toa_do_follow.txt"

    # Nh·∫≠p IP v√† port ADB
      print("\033[1;36mB·∫°n c√≥ th·ªÉ xem video h∆∞·ªõng d·∫´n k·∫øt n·ªëi ADB ·ªü tr√™n c√°c video Youtube!!! ")
      ip = input("\033[1;32mNh·∫≠p IP c·ªßa thi·∫øt b·ªã v√≠ d·ª• (192.168.1.1): \033[1;33m ")
      adb_port = input("\033[1;32mNh·∫≠p port c·ªßa thi·∫øt b·ªã v√≠ d·ª• (838699): \033[1;33m ")

      # Ki·ªÉm tra v√† ƒë·ªçc t·ªça ƒë·ªô t·ª´ file n·∫øu t·ªìn t·∫°i
      x_like, y_like, x_follow, y_follow = None, None, None, None
    
      if os.path.exists(like_coords_file):
           with open(like_coords_file, "r") as f:
              coords = f.read().split("|")
              if len(coords) == 2:
                   x_like, y_like = coords
                   print(f"\033[1;32mƒê√£ t√¨m th·∫•y t·ªça ƒë·ªô n√∫t tim sau : X={x_like}, Y={y_like}")
    
      if os.path.exists(follow_coords_file):
          with open(follow_coords_file, "r") as f:
               coords = f.read().split("|")
               if len(coords) == 2:
                   x_follow, y_follow = coords
                   print(f"\033[1;32mƒê√£ t√¨m th·∫•y t·ªça ƒë·ªô n√∫t follow sau : X={x_follow}, Y={y_follow}")
      if not os.path.exists(config_file):
           print("\033[1;33mL·∫ßn ƒë·∫ßu ch·∫°y th√¨ nh·∫≠p m√£ gh√©p n·ªëi (6 S·ªê) v√† port gh√©p n·ªëi ·ªü G·ª° l·ªói Wi-Fi.\033[0m")
           pair_code = input("\033[1;33mNh·∫≠p m√£ gh√©p n·ªëi 6 s·ªë v√≠ d·ª• (322763): \033[1;33m")
           pair_port = input("\033[1;33mNh·∫≠p port gh√©p n·ªëi v√≠ d·ª• (44832): \033[1;33m")

           with open(config_file, "w") as f:
               f.write(f"{pair_code}|{pair_port}")
      else:
          with open(config_file, "r") as f:
               pair_code, pair_port = [s.strip() for s in f.read().split("|")]
  
      print("\n\033[1;33m ƒêang gh√©p n·ªëi v·ªõi thi·∫øt b·ªã c·ªßa b·∫°n...\033[0m")
      os.system(f"adb pair {ip}:{pair_port} {pair_code}")
      time.sleep(2)
  
      print("\033[1;33mƒêang k·∫øt n·ªëi ADB\033[0m")
      os.system(f"adb connect {ip}:{adb_port}")
      time.sleep(2)
  
      devices = os.popen("adb devices").read()
      if ip not in devices:
        print(f"{Fore.RED}K·∫øt n·ªëi kh√¥ng th√†nh c√¥ng do l·ªói.H√£y th·ª≠ l·∫°i sau! {Fore.WHITE}")
        exit()
    

       # Y√™u c·∫ßu nh·∫≠p t·ªça ƒë·ªô n·∫øu ch∆∞a c√≥
      os.system('cls' if os.name== 'nt' else 'clear')
      print("\033[1;33m NH·∫¨P T·ªåA ƒê·ªò ")
      print("")
      if loai_nhiem_vu in [1, 3] and (x_follow is None or y_follow is None):
           x_follow = input("\033[1;32mNh·∫≠p t·ªça ƒë·ªô X c·ªßa n√∫t follow : \033[1;33m ")
           y_follow = input("\033[1;32mNh·∫≠p t·ªça ƒë·ªô Y c·ªßa n√∫t follow : \033[1;33m ")
           with open(follow_coords_file, "w") as f:
               f.write(f"{x_follow}|{y_follow}")
    
      if loai_nhiem_vu in [2, 3] and (x_like is None or y_like is None):
           x_like = input("\033[1;32mNh·∫≠p t·ªça ƒë·ªô X c·ªßa n√∫t tim: \033[1;33m ")
           y_like = input("\033[1;32mNh·∫≠p t·ªça ƒë·ªô Y c·ªßa n√∫t tim: \033[1;33m ")
           with open(like_coords_file, "w") as f:
              f.write(f"{x_like}|{y_like}")

      return x_like, y_like, x_follow, y_follow

# Khi g·ªçi h√†m setup_adb()
    x_like, y_like, x_follow, y_follow = setup_adb()
elif adbyn == "2":
    pass
# Th√™m ph·∫ßn ch·ªçn lo·∫°i nhi·ªám v·ª• sau khi ch·ªçn t√†i kho·∫£n v√† tr∆∞·ªõc khi b·∫Øt ƒë·∫ßu l√†m nhi·ªám v·ª•
   
dem = 0
tong = 0
checkdoiacc = 0
dsaccloi = []
accloi = ""
os.system('cls' if os.name== 'nt' else 'clear')

print(banner)
print(" \033[1;31mSTT \033[1;39m‚ïë \033[1;33m TH·ªúI GIAN \033[1;39m ‚ïë \033[1;32mSUCCESS \033[1;39m‚ïë \033[1;34mJOB TYPE \033[1;39m‚ïë \033[1;36mTI·ªÄN LO·∫†I JOB \033[1;39m‚ïë \033[1;33mT·ªîNG ‚úîÔ∏è")
print("")
while True:
    if checkdoiacc == doiacc:
        dsaccloi.append(chontktiktok["data"][luachon - 1]["nickname"])
        print(f"{Fore.WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        print(f"\033[1;31müò≠ Acc Tiktok {dsaccloi} g·∫∑p v·∫•n ƒë·ªÅ ho·∫∑c b·ªã nh·∫£ !!!")
        print(f"{Fore.WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
        dsacc()
        while True:
            try:
                print(f"{Fore.WHITE}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê")
                luachon = int(input("\033[1;32mCh·ªçn t√†i kho·∫£n : \033[1;33m"))
                while luachon > len((chontktiktok)["data"]):
                    luachon = int(input("\033[1;31m Acc N√†y Kh√¥ng C√≥ Trong Danh S√°ch C·∫•u H√¨nh, H√£y Nh·∫≠p L·∫°i Acc Kh√°c : \033[1;33m"))
                account_id = chontktiktok["data"][luachon - 1]["id"]
                checkdoiacc = 0
                os.system('cls' if os.name== 'nt' else 'clear')
                for h in banner:
                    print(h,end = "")
                break  
            except:
                print("\033[1;31mSai ƒê·ªãnh D·∫°ng !!!")
    print('\033[1;35m ƒêANG T√åM JOB KI·∫æM TI·ªÄN üçâ ', end="\r")
    max_retries = 3
    retry_count = 0
    nhanjob = None

    while retry_count < max_retries:
        try:
            nhanjob = nhannv(account_id)
            if nhanjob and nhanjob.get("status") == 200 and nhanjob["data"].get("link") and nhanjob["data"].get("object_id"):
                break
            else:
                retry_count += 1
                time.sleep(2)
        except Exception as e:
            retry_count += 1
            time.sleep(1)

    if not nhanjob or retry_count >= max_retries:
        continue

    ads_id = nhanjob["data"]["id"]
    link = nhanjob["data"]["link"]
    object_id = nhanjob["data"]["object_id"]
    job_type = nhanjob["data"]["type"]

    # Ki·ªÉm tra lo·∫°i nhi·ªám v·ª•
    if (loai_nhiem_vu == 1 and job_type != "follow") or \
       (loai_nhiem_vu == 2 and job_type != "like") or \
       (job_type not in ["follow", "like"]):
        baoloi(ads_id, object_id, account_id, job_type)
        continue

    # M·ªü link v√† ki·ªÉm tra l·ªói
    try:
        if adbyn == "1":
            os.system(f'adb shell am start -a android.intent.action.VIEW -d "{link}" > /dev/null 2>&1')
        else:
            #os.system(f"termux-open-url {link}")
            subprocess.run(["termux-open-url", link])
        
        for remaining in range(3, 0, -1):
            time.sleep(1)
        print("\r" + " " * 30 + "\r", end="")

    except Exception as e:
        baoloi(ads_id, object_id, account_id, job_type)
        continue

    # Th·ª±c hi·ªán thao t√°c ADB
    if job_type == "like" and adbyn == "1" and x_like and y_like:
        os.system(f"adb shell input tap {x_like} {y_like}")
    elif job_type == "follow" and adbyn == "1" and x_follow and y_follow:
        os.system(f"adb shell input tap {x_follow} {y_follow}")

    # ƒê·∫øm ng∆∞·ª£c delay
    for remaining_time in range(delay, -1, -1):
        color = "\033[1;35m" if remaining_time % 2 == 0 else "\033[1;36m"
        print(f"\r{color} PhuocDEV Ki·∫øm Ti·ªÅn Online üçâ [{remaining_time}s]   ", end="")
        time.sleep(1)
    print("\r                          \r", end="") 
    color = "\033[1;35m" if remaining_time % 2 == 0 else "\033[1;36m"
    print(f"{color} ƒêang Nh·∫≠n Ti·ªÅn L·∫ßn 1 üçâ... ",end = "\r")

    # Ho√†n th√†nh job
    max_attempts = 2
    attempts = 0
    nhantien = None
    while attempts < max_attempts:
        try:
            nhantien = hoanthanh(ads_id, account_id)
            if nhantien and nhantien.get("status") == 200:
                break
        except:
            pass  
        attempts += 1

    if nhantien and nhantien.get("status") == 200:
        dem += 1
        tien = nhantien["data"]["prices"]
        tong += tien
        local_time = time.localtime()
        hour = local_time.tm_hour
        minute = local_time.tm_min
        second = local_time.tm_sec
        h = hour
        m = minute
        s = second
        if hour < 10:
            h = "0" + str(hour)
        if minute < 10:
            m = "0" + str(minute)
        if second < 10:
            s = "0" + str(second)
                                      
        chuoi = (f"\033[1;31m {dem} \033[1;39m‚ïë "
                f"\033[1;36m{h}:{m}:{s} \033[1;39m ‚ïë "
                f"\033[1;32m SUCCESS \033[1;39m‚ïë "
                f"\033[1;34m {job_type} \033[1;39m ‚ïë "
                f"\033[1;36m +{tien} \033[1;39m ‚ïë "
                f"\033[1;33m {tong} vnƒë \033[1;39m  ")
                

        print("                                                    ", end="\r")
        print(chuoi)
        time.sleep(0.7)
        checkdoiacc = 0
    else:
        try:
            baoloi(ads_id, object_id, account_id, nhanjob["data"]["type"])
            print("                                              ", end="\r")
            print("\033[1;35m B·ªè qua job l·ªói th√†nh c√¥ng üçâ", end="\r")
            os.system('cls' if os.name == 'nt' else 'clear')
            print(banner)
            print(" \033[1;31mSTT \033[1;39m‚ïë \033[1;33m TH·ªúI GIAN \033[1;39m ‚ïë \033[1;32mSUCCESS \033[1;39m‚ïë \033[1;34mJOB TYPE \033[1;39m‚ïë \033[1;36mTI·ªÄN LO·∫†I JOB \033[1;39m‚ïë \033[1;33mT·ªîNG ‚úîÔ∏è")
            print("")
            sleep(1.5)
            checkdoiacc += 1
        except:
            pass